{"version":3,"sources":["components/Display/Display.tsx","components/Set/Set.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","message","displayValue","className","maxValue","onClick","incValue","startValue","disabled","resetValue","Set","changeMessage","type","value","onChange","event","changeMaxValue","currentTarget","changeStartValue","valueAsNumber","localStorage","setItem","JSON","stringify","changeDisplayValue","App","storageMaxValue","getItem","newStorageMaxValue","parse","storageStartValue","newStorageStartValue","useState","setMaxValue","setStartValue","setDisplayValue","setMessage","newMaxValue","newStartValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9e3a119.chunk.js","sourcesContent":["export type DisplayPropsType = {\n    maxValue: number\n    startValue: number\n    displayValue: number\n    message: string\n    incValue: (value: number) => void\n    resetValue: () => void\n}\n\nexport function Display(props: DisplayPropsType) {\n\n    const incHandler = () => {\n        props.incValue(props.startValue);\n\n    };\n    const resetHandler = () => {\n        props.resetValue();\n    };\n\n\n    let Display\n    if (props.message === \"ErrorMessage\") {\n        Display = \"Incorrect value!\";\n\n    } else if (props.message === \"Message\") {\n        Display = \"Enter correct values and press 'Set'.\";\n\n    } else {\n        Display = props.displayValue;\n    }\n\n\n    return (\n        <div className=\"Display\">\n\n            {props.message == \"ErrorMessage\" && <div className={\"DisplayMessageError\"}>{Display}</div>}\n            {props.message == \"Message\" && <div className={\"DisplayMessage\"}>{Display}</div>}\n            {(props.message !== \"Message\" && props.message !== \"ErrorMessage\") && <div className={props.displayValue == props.maxValue\n                ? \"DisplayValueMax\"\n                : \"DisplayValue\"}>{Display}</div>}\n\n            <div className=\"Buttons\">\n                <div className={props.message === \"ErrorMessage\" || props.message === \"Message\" || props.displayValue == props.maxValue\n                    ? \"IncDisabled\"\n                    : \"Inc\"}>\n                    <button\n                        onClick={incHandler}\n                        disabled={props.message === \"ErrorMessage\" || props.message === \"Message\" || props.displayValue == props.maxValue}\n                    >Inc</button>\n                </div>\n                <div className={props.message === \"ErrorMessage\" || props.message === \"Message\" || props.displayValue == props.startValue\n                    ? \"ResetDisabled\"\n                    : \"Reset\"}>\n                    <button\n                        disabled={props.message === \"ErrorMessage\" || props.message === \"Message\" || props.displayValue == props.startValue}\n                        onClick={resetHandler}\n                    >Reset</button>\n                </div>\n            </div>\n        </div>)\n}\n","import { ChangeEvent } from \"react\"\n\nexport type SetPropsType = {\n    maxValue: number\n    startValue: number\n    message: string\n    changeMaxValue: (newMaxValue: number) => void\n    changeStartValue: (newStartValue: number) => void\n    changeMessage: (errorValue: string) => void\n    changeDisplayValue: (displayValue: number) => void\n}\n\nexport function Set(props: SetPropsType) {\n\n\n    if (props.startValue < 0 || props.maxValue < 0 || props.startValue >= props.maxValue) {\n        props.changeMessage(\"ErrorMessage\");\n    }\n\n    const setHandler = () => {\n        localStorage.setItem(\"maxValue\", JSON.stringify(props.maxValue));\n        localStorage.setItem(\"startValue\", JSON.stringify(props.startValue));\n        props.changeDisplayValue(props.startValue);\n        props.changeMessage(\"\");\n    };\n\n    const onChangeMaxValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        props.changeMaxValue(+event.currentTarget.value);\n        props.changeMessage(\"Message\")\n    }\n\n    const onChangeStartValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        props.changeStartValue(event.currentTarget.valueAsNumber);\n        props.changeMessage(\"Message\");\n    }\n\n    return (\n        <div className=\"Set\">\n            <div className=\"MaxStart\">\n                <div className=\"MaxValue\">Max value:</div>\n                <div className=\"StartValue\">Start value:</div>\n                <div className={props.maxValue > -1 && props.maxValue > props.startValue ? \"InputMax\" : \"InputMaxtWarning\"}>\n                    <input\n                        type=\"number\"\n                        value={props.maxValue}\n                        onChange={onChangeMaxValueHandler}\n                    />\n                </div>\n                <div className={props.startValue > -1 && props.startValue < props.maxValue ? \"InputStart\" : \"InputStartWarning\"}>\n                    <input\n                        type=\"number\"\n                        value={props.startValue}\n                        onChange={onChangeStartValueHandler}\n                    />\n                </div>\n            </div>\n            <div className={props.message == \"\" || props.message == \"ErrorMessage\"\n                ? \"DisabledButtonSet\"\n                : \"ButtonSet\"}>\n                <button\n                    onClick={setHandler}\n                    disabled={props.message == \"\" || props.message == \"ErrorMessage\"}\n                >Set</button>\n            </div>\n        </div>\n    )\n}\n\n\n\n// import { ChangeEvent, useState } from \"react\";\n// import { DisplayMessageType } from \"../../App\";\n// import { Button } from \"../Button/Botton\"\n// import { Input } from \"../Input/Input\";\n\n// export type SetPropsType = {\n//     maxValue: number\n//     startValue: number\n//     displayValue: number\n//     disabledButton: boolean\n//     changeMaxValue: (newMaxValue: number) => void\n//     changeStartValue: (newStartValue: number) => void\n//     changeDisplayValue: (displayValue: number) => void\n//     changeDisabledButton: (disabledButton: boolean) => void\n//     changeDisplayMessage: (displayMessage: DisplayMessageType) => void\n// }\n\n// export function Set(props: SetPropsType) {\n\n//     const setHandler = () => {\n//         props.changeDisplayValue(props.startValue);\n//         props.changeDisabledButton(true);\n//         localStorage.setItem(\"maxValue\", JSON.stringify(props.maxValue));\n//         localStorage.setItem(\"startValue\", JSON.stringify(props.startValue));\n//         props.changeDisplayMessage(\"\");\n//     };\n\n//     const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n//         props.changeMaxValue(+event.currentTarget.value);\n//         props.changeDisabledButton(false);\n\n//         // if (props.maxValue <= props.startValue) {\n//         //     props.changeDisplayMessage(\"Ошибка\")\n//         // }\n//         props.changeDisplayMessage(\"Введи\");\n//     }\n\n//     const onChangeHandler2 = (event: ChangeEvent<HTMLInputElement>) => {\n//         props.changeStartValue(event.currentTarget.valueAsNumber);\n//         props.changeDisabledButton(false);\n\n\n//         // if (props.maxValue <= props.startValue) {\n//         //     props.changeDisplayMessage(\"Ошибка\")\n//         // }\n//         props.changeDisplayMessage(\"Введи\");\n//     }\n\n//     // if(props.maxValue<=props.startValue){\n//     //     props.changeDisplayMessage(\"Ошибка\")\n//     // }\n\n//     return (\n//         <div className=\"Set\">\n//             <div className=\"MaxStart\">\n//                 <div className=\"MaxValue\">Max value:</div>\n//                 <div className=\"StartValue\">Start value:</div>\n//                 <div className={props.maxValue > -1 && props.maxValue > props.startValue ? \"InputMax\" : \"InputMaxtWarning\"}>\n//                     {/* <Input /> */}\n//                     <input\n//                         type=\"number\"\n//                         value={props.maxValue}\n//                         onChange={onChangeHandler}\n//                     />\n//                 </div>\n//                 <div className={props.startValue > -1 && props.startValue < props.maxValue ? \"InputStart\" : \"InputStartWarning\"}>\n//                     {/* <Input /> */}\n//                     <input\n//                         type=\"number\"\n//                         value={props.startValue}\n//                         onChange={onChangeHandler2}\n//                     />\n//                 </div>\n//             </div>\n//             <div className=\"ButtonSet\">\n//                 {/* <Button\n//                     buttonName=\"Set\"\n//                     Handler={setHandler}\n//                     value={props.value}\n//                 /> */}\n//                 <button\n//                     // onClick={()=>{props.changeMaxValue(newValue)}}\n//                     onClick={setHandler}\n//                     disabled={props.disabledButton || props.startValue < 0 || props.maxValue <= 0 || props.startValue >= props.maxValue}\n//                 >Set</button>\n//             </div>\n//         </div>\n//     )\n// }\n\n\n\n\n\n","import { useState } from 'react';\nimport './App.css';\nimport { Display } from \"./components/Display/Display\";\nimport { Set } from './components/Set/Set';\n\nfunction App() {\n\n\n    let storageMaxValue = localStorage.getItem(\"maxValue\")\n    let newStorageMaxValue: number = 0\n    if (storageMaxValue) {\n        newStorageMaxValue = JSON.parse(storageMaxValue);\n    }\n\n    let storageStartValue = localStorage.getItem(\"startValue\")\n    let newStorageStartValue: number = 0\n    if (storageStartValue) {\n        newStorageStartValue = JSON.parse(storageStartValue);\n    }\n\n\n    let [maxValue, setMaxValue] = useState<number>(newStorageMaxValue)\n    let [startValue, setStartValue] = useState<number>(newStorageStartValue)\n    let [displayValue, setDisplayValue] = useState<number>(startValue)\n    let [message, setMessage] = useState<string>(\"\")\n\n\n    function changeMaxValue(newMaxValue: number) {\n        setMaxValue(newMaxValue);\n    }\n    function changeStartValue(newStartValue: number) {\n        setStartValue(newStartValue);\n    }\n    function changeMessage(message: string) {\n        setMessage(message);\n    }\n    function changeDisplayValue(displayValue: number) {\n        setDisplayValue(displayValue);\n    }\n    function resetValue() {\n        setDisplayValue(startValue);\n    }\n    function incValue() {\n        if (displayValue < maxValue) {\n            displayValue = displayValue + 1;\n            setDisplayValue(displayValue);\n        }\n    }\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"Counter\">\n                <Display\n                    maxValue={maxValue}\n                    startValue={startValue}\n                    displayValue={displayValue}\n                    message={message}\n                    incValue={incValue}\n                    resetValue={resetValue}\n                />\n                <Set\n                    maxValue={maxValue}\n                    startValue={startValue}\n                    message={message}\n                    changeMaxValue={changeMaxValue}\n                    changeStartValue={changeStartValue}\n                    changeDisplayValue={changeDisplayValue}\n                    changeMessage={changeMessage}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}